let Joi,bcrypt,User,CustomErrorHandler;_2d4‍.x([["default",()=>_2d4‍.o]]);_2d4‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_2d4‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_2d4‍.w("../../models",[["User",["User"],function(v){User=v}]]);_2d4‍.w("../../services",[["CustomErrorHandler",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);



const registerController = {
    async register(req, res, next) {
        //request validation
        const registerSchema = Joi.object({
            firstName: Joi.string().min(2).max(30).required(),
            lastName: Joi.string().min(1).max(30).required(),
            email: Joi.string().email().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-z0-9]{8}$')).required(),
            repeat_password: Joi.ref('password')

        })
        const { error } = registerSchema.validate(req.body)
        if (error) {

            return next(error)
        }


        try {
            const exist = await User.exists({ email: req.body.email })
            if (exist) {
                return next(CustomErrorHandler.alreadyExist("Email already exist."));
            }

        } catch (err) {
            return next(err)
        }


        const hashedPassword = await bcrypt.hash(req.body.password, 10)
        const user = new User({
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            email: req.body.email,
            password: req.body.hashedPassword
        })
        let result = await user.save();
        _2d4‍.g.console.log(result)




        res.send("Done")
    }
}

_2d4‍.d(registerController);